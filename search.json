[{"title":"以太坊源码阅读——第一篇","path":"/2023/02/20/以太坊源码阅读——第一篇/","content":"以太坊源码阅读笔记——第一篇本系列文章，用来记录学习和理解以太坊源码的过程笔记，欢迎交流与共同学习。作为一个10余年的老Coder，最近开始学习Golang，并尝试阅读以太坊的源码来试图理解区块链技术的运行原理。特此记录阅读笔记。作为第一篇，在阅读以太坊源码之前，先尝试着从一个区块链小白的角度，按照自己的理解来解释，什么是区块链，如何理解区块链，让刚接触或未接触区块链的朋友们有个快速理解。 关于Web3、区块链、比特币之间是什么关系先了解下这几个概念分别是什么，再看他们之间的关系 Web3，是相对于Web1.0和Web2.0来说的 Web1.0，被称为“只读网络”，当然这个说法并不绝对，更多的体现为用户通过网站等形式，单向的获取信息； Web2.0，被称为“参与式网络”，随着博客、微博等产品的兴起，到现在的抖音、朋友圈，用户从单向获取信息变成了人人可参与、发布、评论等互动形式的网络； Web3.0，被称为“去中心化网络”，这里对应的即是Web2.0即以前的属于中心化网络。 中心化网络 用户发布的数据归属于这些产品所属公司的，例如微信朋友圈属于腾讯的、抖音属于字节跳动的，他们有对账号及对应数据的生杀大权，并且随着公司的经营状况（例如公司倒闭或被收购），对应的数据也有可能注销删除、丢失、销毁等（例如曾经火爆的国产Facebook——人人网）。 另一方面这些数据对于系统的管理原来将是可以进行修改及删除等操作的，虽然这些大公司有着严格的权限控制和审核管理机制，但单从技术角度是属于“中心化管理”的。 去中心化网络 即是网络中的数据并非由公司所有，而是所有参与者共有（这里面会涉及到另外一个概念公链、联盟链及私链，下边会另行介绍），没有所谓的“中心”组织机构来对数据做干预，同时这些数据也就不受公司经营情况的影响 既然没有中心化组织，那么从技术上看数据就不可被窜改，因为数据不归属于任何一个组织，这种共有机制保障了数据防篡改的安全性 在中心化网络的基础之上，各家公司在此上层来构建应用，形成底层数据的共享和持久化，用户个人的数据归属于每个用户自己所有，大家共同遵循着同样的规则，形成一套自治的理想化的环境（当然，并没有绝对的安全，绝对的理想） 在末尾会有关于去中心化的更多思考 ![Web2与Web3的直观比较](https://github.com/pop-lee/ETH-source-study/blob/main/00%20%E5%BC%80%E5%A7%8B/Web3&amp;Web2.png?raw=true &#x3D;500x) 区块链，作为一项实现去中心化机制的技术，或者理解为一种计数架构思想； 比特币，可能大多数人听说区块链是通过比特币，而比特币是用区块链这种技术来搭建出的产品。 总结一下，Web3是宏观上的去中心化网络基础概念，区块链是Web3的一种技术，比特币则是使用区块链技术构建的平台应用。 如何理解区块链我们先暂时浅显的拆开来理解“区块”和“链”，“区块”是存储数据的形式，“链”是一种可以看做链表的结构。 区块链解决了什么问题，存在的价值是什么上面我们提到关于Web2和Web3的区别，中心化与去中心化，那么这里更深层次上看，是一种安全机制的差别。以下我尝试着用一个故事来表述。 前提，账本是一本一本的记，每一本都是基于前一本的账单，追加的记账。 每桌客人买单结账的记录，都会让每层楼的管家知道，也就是每笔账都会在所有楼层的账本中记录。 有一家很大的饭庄，有5层楼大，有一名管家专门来负责记账。 问题1，假如账记错了怎么办？尝试解决，在一本完整的账记完之后，需要封账，拿着对应的票据进行对账，来明确与实际是否有出入。 问题2，每桌客人结账都是通过这名管家记到账本上，那么这个管家就对账本有绝对的控制权，假如管家拿出一部分进入了掌柜自己的口袋，并没有记在账上也不会有人知道的。尝试解决，我们假定饭庄的5层楼，每层楼都安放一名管家，每当有客人结账的时候，对应楼层的管家将收入记到账本中，同时另外4层的管家对应的账单，也就是5名管家都会将消费记到各自的账本中，当记满了一本的时候，与另外4名管家进行对账，来解决一名管家对账目有绝对控制权的问题，其余的4名管家起到了监督的作用。那么有人会问，增加了4名管家是需要成本的，这个我们会在末尾的“以太坊是什么”中做进一步的解释。 问题3，5名管家记的账，有差异怎么办呢？以谁的为准？尝试解决，饭庄的老板给大家约定好遵循一个原则，少数服从多数，当5名管家中超过3名管家以上记的账一致，那么则以这个结果为准。 问题4，如果其中一名管家买通了另外的其中两名，再私下的给一定的好处，就可以伪造账目，让错误的账被认定为是正确的账。如何解决呢？尝试解决 1、当发现造假的话，会有严重的惩罚作为威慑， 2、管家是通过一定难度的考验而选出来的，例如先做店小二，评价最好的店小二才能够作为管家记账，还有就是深受老板的信赖。 3、管家可以轮换，这样来达到不会始终由某几个管家之间达成私下的操作来提升造假成本。 4、对于记账的管家有一定的奖励，而减少通过歪门邪道的方式来获取利益。 5、当饭庄开的越来越大，负责记账的管家越来越多，那么需要收买的管家的难度也就越来越大，比如从5个管家需要至少有3个记账保持一致，当有50个管家的时候需要至少有26个记账保持一致。 6、每本账所记录的交易金额或者记账的时间范围做限定，这样从每本账的总额上也就有了限制，那么即便造假所能获得的收益也不会很高。其实从本质上并不能完全的杜绝，而出发点就是尽量提升造假成本，甚至于造假所付出的成本比获得的收益还要大，那么造假就失去了意义。 问题5，每个管家负责各自楼层的账目，这是一个各自记账的过程，也就会有可能出现不同楼层同时记完了一本账的情况，而每层楼的管家会优先把自己楼层的消费记到账里，这时候就出现了不同楼层的账本内容出现了分叉，那么要以哪本账为准呢？尝试解决，记完账后彼此的账目内容是需要交换的，并且需要进行对账验证，而这都是需要时间的，那么在对账完成之前有了新的客人来吃饭结账，依然是需要继续记账的，所以在这个阶段同时记完的账暂时都被认为是待定的账本暂时搁置，各自楼层会基于自己的账本再记录新的账本，而我们为这样的情况设定一个限度，例如1楼的待定的账本已经累加到了3本，那么通知其他2、3、4、5楼层，这里的账记的最快，最先达到数目的，那么以1楼的账本为主记录后续的账，其他楼层的待定账本作废，进行对账销账后，最终达成一致以1楼账本为准继续记录，其他楼层的消费如果没有在这些账本中的，会被保留记录到后续的账本中做追加。 通过以上的例子，可以大概了解，这里面的核心问题是解决伪造的账，不受信任的问题。而上面关于Web2.0的描述，我们生活中中心化的App数据其实是可以被窜改，删除等情况的。数据归属也并非属于用户自己，这就是区块链技术在致力解决的问题。 将上面的案例对应到区块链技术中的概念（后续会对每个区块链中的概念做详细描述）。 账本中的消费记录，对应了数据。 完成一本账的记录，对应了一个区块。 追加方式的流水账，对应了将区块形成链。 对账与票据的对账，对应了区块链中的数据做签名验证。 管家间的互相监督，对应了去中心化的分布式节点。 不同账本间一致性，对应了区块链的权威数据认定。 管家的选拔与考核，对应了区块链的共识机制，对应了挖矿难度等，例如最早的POW（工作量证明）、POS（权益证明）、POA（权威证明） ，管家等同于运行区块链程序的节点，管家的数量越多，造假难度越大。 对管家的开放选拔，考核，即是区块链中的共识机制， 每本帐的大小限制，对应了交易总额的限制、燃料值的限制等。 待确定的账本数量，对应了最长链原则。 以太坊是什么从两种视角来看，首先以太坊是个平台应用，与此同时也可以用来形容平台所运行的核心程序，作为完备功能的区块链框架，在此基础之上还可以做二次开发，衍生出来很多不同规则的区块链应用。 和上面提到比特币一样，以太坊同样是利用区块链技术的搭建的平台，通过区块来记录存储数据，而搭建这样的平台是需要成本的，就如上面例子中的多名管家要比一名管家付出更多的成本。类似于以太坊和比特币这样的平台，是建立了一套生态的平衡体系，由利益所驱使各方投入共同建立维护公共的区块链网络（公链）。App满足用户的个人需求，产生了价值，用户愿意付费或类似于现在互联网中广告，等生态来形成生态链。App、网络应用要使用链来存储数据，做数据处理等等操作来满足业务需求，则需要支付费用，就像汽车行走需要汽油作为燃料，引出gas费（燃料费），这些燃料费会作为奖励发给提供数据存储，参与网络建设的节点们，即矿工程序（案例中参与竞选项成为管家的人），矿工程序通过工作量证明机制，通过运算来竞选记账权，最先计算出一道题的结果则有权记账，而产生区块即刻获得对应奖励（仅大概描述，细节的奖励分配在源码阅读中进行详细描述）用户越多，链所产生的价值就越高，需要的矿工节点就越多，奖励矿工的价值收益就越高，而矿工节点越多，链的安全性和价值就越高，形成一个生态循环，当然，这个生态还远不止如此，目前主流的矿工都是通过运算来争取记账权，也就产生了显卡等设备的资源竞争，同样数据存储也需要芯片制造，晶圆制造，物流运输，贸易管控等众多因素而影响显示世界的价值生态。而对于平台给用户带来的价值，以一种代币化的形式所体现，平台对用户来讲越有价值，代币就越有价值，这就是以太币，比特币能够锚定货币的主要原因。 关于公链、私链、联盟链 公链，通过名称我们就可以直观的了解到，公链即是公有链，也就是完全开放，任何人如果想参与其中，都可以启动节点加入到公链当中，属于完全去中心化的。 私链，则与公链相反，它其实属于中心化的管理控制，仅仅是技术上使用了区块链的方式来运行和存储，但从归属权和控制权角度，是归属于某个公司，或者是某个组织机构的。 联盟链，则是介于去中心化与中心化之间的存在，是由多个公司或组织共同维护搭建，来达到一个半开放的状态，属于联合管控，只有经过授权才可以加入和管理链中的节点。 完全去中心化的环境其实也有它的弊端，那就是隐秘性太强，导致很多违法分子通过这种私密的网络环境做一些不法的事，难易追踪和管理。也正因如此才有了类似于联盟链这种半中心化的产物。当然并不是说去中心化就完全不可追踪，其实本质上是缺少了账户与实名之间的映射关系，只要补全依然是可以达到追踪的目的。而当一个联盟足够大，我们可以从另一种角度来认为它是对公共开放的，只是作为一种基础建设而存在供大众所使用，只是部署运行的程序受到中心化的管理控制，这样和公链的差别也就没有那么大了。 去中心化的更多思考上面讲到Web3.0以及区块链在围绕去中心化的思想，这种公有网络是人人可以参与的，并且数据最终归属于用户个人所有，伴随着DAO（Decentralized Autonomous Organization）这种去中心化自治组织的产生，更多“自治”也许是Web3的更长远目标，所有智能设备的去中心化互联，结合人工智能AI参与其中，让更多事是按照“合约规则”来进行，虚拟现实与增强现实打造的新的世界让人有无限的遐想，也许这就是Web3现在很火，但又让人觉得很虚无缥缈，感觉是一个漫长又遥远的路吧 关于以太坊的源码阅读以太坊源码，我会拆分成如下模块进行笔记编写。 存储篇 账户篇 状态管理篇 交易篇 挖矿篇 链维护篇 EVM篇 共识篇 算法篇 而本系列笔记，将尽可能的减少涉及币圈和业务层的东西，更多专注在以太坊技术上 欢迎多多交流，共同学习","tags":["区块链 - 以太坊"],"categories":["以太坊源码阅读笔记"]},{"title":"安装基于Hexo和Github Page的个人博客","path":"/2018/12/15/安装基于Helo和Github-Page的个人博客/","content":"Gitee Pages 的使用此处之所以选择Gitee、而不是Github活着Gitlab，有几个原因 第一因为国内网络的复杂环境问题； 第二是对于上传图片，Gitee有自带的图床，随时随地写到Issues，活着Wiki里，截图直接粘贴就会自动生成图片地址和相应代码了，非常方便，当然，其实本文中的管理后台也可以实现这个功能，会传到生成的源码中，占用项目空间，所以用Gitee的图床再好不过了； 具体的创建方式很简单在Gitee创建一个项目，和你在Gitee上的名称保持一致，然后，在项目页，选择服务，Gitee Pages服务，创建即可，此处要求你得绑定手机才有权限开通此服务，如下图 遇到的问题安装还算顺利，仅遇到了一个问题，在执行hexo d的时候，停留在了这里delete mode 100644 placeholder。其实只要自己提交一下到Git上就可以了，以后就不会有这个问题了，可能是没有找到仓库或者什么其他原因吧。 管理博客界面Github：https://github.com/jaredly/hexo-admin官网：https://jaredforsyth.com/hexo-admin/ 安装在项目所在的目录执行npm install --save hexo-admin,用yarn就是 yarn add hexo-admin，然后hexo server d之后，访问http://localhost:4000/admin就可以了 发布博客通过上面的管理页面创建博客并发布会非常方便，发不完之后，会在对应的目录下生成相关的.md文件，其实就相当于是调用了hexo的post命令创建并编辑的 使用hexo-admin发布hexo-admin为我们已经提供了发布的工具，我们需要在我们的项目中创建一个发布的脚本，拿我本地来讲，MacOS，创建一个.sh可运行文件，比如我叫hexo-deploy.sh，内容如下 1234567#!/usr/bin/env shhexo deploy -g``` 同时要在_config.yml中追加如下片段，指向这个.sh文件```ymladmin: deployCommand: &#x27;./hexo-deploy.sh&#x27; 此处记得要授权，否则没有权限执行，chmod a+x hexo-deploy.sh这样的话，在我们的Hexo Admin页面中的Deploy中，就可以直接发布了，如下图 使用命令发布其实使用命令发布也就是上面.sh文件里的内容了，直接执行。可以通过hexo d -g命令来进行全局发布，会按照对应的主体生成静态html代码，生成到.deply_git文件夹下，与此同时，也会将生成后的文件推送到远端的Git仓库中，此处不用担心本地的配置文件推送上去，他只会推送.deply_git这个文件夹 需要注意，如果你想把本地的hexo项目也保存起来，可以将此项目推送到私有仓库，免得泄露自己的配置文件中的敏感信息 安装Next主题因为网上这个资料是最多的，所以毫不犹豫的选择这个主题，不是因为是否好看，而是稳定且出问题可以借鉴。毕竟上了年纪，更懂得什么时候需要稳定，什么时候需要探索。官网：https://theme-next.org/官方Github：https://github.com/theme-next/hexo-theme-next/tree/v6.0.6注意有类似的叫相同名字的其他个人Git ####安装进入到项目文件夹下的theme文件夹，然后clone项目git clone https://github.com/theme-next/hexo-theme-next然后将_config.yml中对应原来默认生成的theme文件夹下的主体替换为hexo-theme-next，也就是新下载的文件夹，类似如下目录 评论功能此处使用的是Valine，在Next主题的配置文件中进行配置安装，依赖于如下平台官网https://leancloud.cn/ 在此平台注册后，在管理后台创建App，并生成对应的appId和appKey，然后配置到Next主题的配置文件中，即可使用 如图所示，替换对应theme主体下_config.yml中，搜索Valine片段，替换对应appId和appKey 此处还需要注意一点，就是需要在leancloud平台上的设置里，安全菜单里增加安全域名，也就是自己的网站域名，否则评论功能是无法使用的 阅读量的统计此处不得不再说关于Next主题真的是支持的内容很多，还是上面的leancloud.cn平台，里面的数据库，我们增加一张用来统计文章阅读量的表Counter，类似如下图 然后在Next主题的配置文件中查找leancloud_visitors，在下面配置好之前配置的appId和appKey即可 此处注意，因为LeanCloud有一个安全bug，所以还需要安装一个组件yarn add hexo-leancloud-counter-security来自https://github.com/theme-next/hexo-leancloud-counter-security操作很复杂，我们一步一步来说 安装yarn add hexo-leancloud-counter-security ，或者像官网的npm安装 增加配置 123456leancloud_counter_security: enable_sync: true app_id: &lt;&lt;your app id&gt;&gt; app_key: &lt;&lt;your app key&gt;&gt; username: &lt;&lt;your username&gt;&gt; # Will be asked while deploying if is left blank password: &lt;&lt;your password&gt;&gt; # Recommmended to be left blank. Will be asked while deploying if is left blank 此处配置app_id和app_key和上面一样，都是leancloud的，说一下用户名和密码，我们此处借助于这个安全插件来实现部署，以确保我们html中访问数量不会轻易被窜改，所以会去和数据库中做对比，从安全考虑，我们稍后要创建一个用户名来操作线上数据库，此处来填写用户名密码是为了部署的时候，不用手动输入，如果不填写，每次部署的时候手动输入也可以 更改部署类型 12deploy: type: leancloud_counter_security_sync 此处不再使用git来进行部署，而是使用这个插件来部署 创建用户 1hexo lc-counter register &lt;&lt;username&gt;&gt; &lt;&lt;password&gt;&gt; 刚才说到的要创建的用户名，这个账号会创建到leancloud里，然后进行分配权限 分配权限粘贴如下代码 12345678var query = new AV.Query(&quot;Counter&quot;);if (request.object.updatedKeys.indexOf(&#x27;time&#x27;) !== -1) &#123; return query.get(request.object.id).then(function (obj) &#123; if (obj.get(&quot;time&quot;) + 1 !== request.object.get(&quot;time&quot;)) &#123; throw new AV.Cloud.Error(&#x27;Invalid update!&#x27;); &#125; &#125;)&#125; 保存之后点部署–生产环境 授权如上图，存储–&gt;Counter–&gt;其他–&gt;权限设置中，对三个地方进行指定用户，也就是把刚才注册的用户添加进来，此处按理说会查询到自动补全的 致辞，记录访问数量也就算完成了，此处比较麻烦，还是因为安全漏洞太多导致的。","tags":["个人博客","Github Pages","hexo","日常工具"],"categories":["日常工具"]},{"title":"Hello World","path":"/2018/12/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]